<?xml version="1.0" encoding="utf-8"?>
<!--

ADOBE SYSTEMS INCORPORATED
Copyright 2008 Adobe Systems Incorporated
All Rights Reserved.

NOTICE: Adobe permits you to use, modify, and distribute this file
in accordance with the terms of the license agreement accompanying it.

-->
<s:SparkSkin xmlns:fx="http://ns.adobe.com/mxml/2009" xmlns:s="library://ns.adobe.com/flex/spark"
	xmlns:fb="http://ns.adobe.com/flashbuilder/2009" alpha.disabled="0.5" blendMode="normal">
	
	<fx:Metadata>
		<![CDATA[ 
		[HostComponent("spark.components.TextInput")]
		]]>
	</fx:Metadata> 
	
	<fx:Script fb:purpose="styling">
		private var paddingChanged:Boolean;
		private var cornerRadius:Number = 0;

		override protected function commitProperties():void
		{
			super.commitProperties();
			
			if (paddingChanged)
			{
				updatePadding();
				paddingChanged = false;
			}
		}
		
		override protected function updateDisplayList(unscaledWidth:Number, unscaledHeight:Number):void
		{
			if (getStyle("borderVisible") == true)
			{
				border.visible = true;
				background.left = background.top = background.right = background.bottom = 1;
				textDisplay.left = textDisplay.top = textDisplay.right = textDisplay.bottom = 1;
			}
			else
			{
				border.visible = false;
				background.left = background.top = background.right = background.bottom = 0;
				textDisplay.left = textDisplay.top = textDisplay.right = textDisplay.bottom = 0;
			}
			
			super.updateDisplayList(unscaledWidth, unscaledHeight);
		}
		
		private function updatePadding():void
		{
			if (!textDisplay)
				return;
			
			// Push padding styles into the textDisplay
			var padding:Number;
			
			padding = getStyle("paddingLeft");
			if (textDisplay.getStyle("paddingLeft") != padding)
				textDisplay.setStyle("paddingLeft", padding);
			
			padding = getStyle("paddingTop");
			if (textDisplay.getStyle("paddingTop") != padding)
				textDisplay.setStyle("paddingTop", padding);
			
			padding = getStyle("paddingRight");
			if (textDisplay.getStyle("paddingRight") != padding)
				textDisplay.setStyle("paddingRight", padding);
			
			padding = getStyle("paddingBottom");
			if (textDisplay.getStyle("paddingBottom") != padding)
				textDisplay.setStyle("paddingBottom", padding);
		}
		
		override public function styleChanged(styleProp:String):void
		{
			var allStyles:Boolean = !styleProp || styleProp == "styleName";
			
			super.styleChanged(styleProp);
			
			if (allStyles || styleProp.indexOf("padding") == 0)
			{
				paddingChanged = true;
				invalidateProperties();
			}
		}

		private static const focusExclusions:Array = ["textDisplay"];
		
		override public function get focusSkinExclusions():Array { return focusExclusions;};
	</fx:Script>
	
	<s:states>
		<s:State name="normal"/>
		<s:State name="disabled"/>
	</s:states>
	
	<!-- fill -->
	<s:Rect id="background" left="1" right="1" top="1" bottom="1"
		fill="{getStyle('inputFill')}"
		radiusX="{getStyle('inputCornerRadius')}" 
		topRightRadiusX="0" bottomRightRadiusX="0"/>
	
	<!-- border --> 
	<s:Rect left="0" right="0" top="0" bottom="0" id="border" 
		stroke="{getStyle('inputStroke')}"
		radiusX="{getStyle('inputCornerRadius')}" 
		topRightRadiusX="0" bottomRightRadiusX="0"/>
	
	<!-- text -->
	<s:RichEditableText id="textDisplay"
		lineBreak="explicit"
		verticalAlign="middle"
		widthInChars="10"
		left="1" right="1" top="1" bottom="1" />
	
</s:SparkSkin>
